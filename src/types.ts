import {
  ColumnType,
  Generated,
  Insertable,
  JSONColumnType,
  Selectable,
  Updateable
} from 'kysely'

export interface Database {
  person: PersonTable
  pet: PetTable
}

// This interface describes the `person` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Person`,
// `NewPerson` and `PersonUpdate` types below.
export interface PersonTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>

  first_name: string
  gender: 'man' | 'woman' | 'other'

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  last_name: string | null

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  created_at: ColumnType<Date, string | undefined, never>

  // You can specify JSON columns using the `JSONColumnType` wrapper.
  // It is a shorthand for `ColumnType<T, string, string>`, where T
  // is the type of the JSON object/array retrieved from the database,
  // and the insert and update types are always `string` since you're
  // always stringifying insert/update values.
  metadata: JSONColumnType<{
    login_at: string;
    ip: string | null;
    agent: string | null;
    plan: 'free' | 'premium';
  }>
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type Person = Selectable<PersonTable>
export type NewPerson = Insertable<PersonTable>
export type PersonUpdate = Updateable<PersonTable>

export interface PetTable {
  id: Generated<number>
  name: string
  owner_id: number
  species: 'dog' | 'cat'
}

export type Pet = Selectable<PetTable>
export type NewPet = Insertable<PetTable>
export type PetUpdate = Updateable<PetTable>

export interface MutualFundEntityTable {
  unique_id : ColumnType<string, string , never>
  last_upd_date : Date
  name_th : string
  name_en : string
  active : boolean
}

export type MutualFundEntity = Selectable<MutualFundEntityTable>
export type NewMutualFundEntity = Insertable<MutualFundEntityTable>
export type MutualFundEntityUpdate = Updateable<MutualFundEntityTable>

export interface MutualFundEntitySocialMediaTable {
  unique_id : ColumnType<string, string , never>
  platform_name : string
  platform_account_name : string
  platform_url : string
  last_upd_date: Date
}

export type MutualFundEntitySocialMedia = Selectable<MutualFundEntitySocialMediaTable>
export type NewMutualFundEntitySocialMedia = Insertable<MutualFundEntitySocialMediaTable>
export type MutualFundEntitySocialMediaUpdate = Updateable<MutualFundEntitySocialMediaTable>

export interface FundsTable {
    proj_id: ColumnType<string, string , never>
    last_upd_date: Date
    regis_id: string
    regis_date: string
    cancel_date: string
    proj_name_th: string
    proj_name_en: string
    proj_abbr_name: string
    fund_status: string
    unique_id: string
    permit_us_investment: string
    invest_country_flage: string
    MutualFundEntity_unique_id : string
}

export type Funds = Selectable<FundsTable>
export type NewFunds = Insertable<FundsTable>
export type FundsUpdate = Updateable<FundsTable>

export interface FundFactSheetTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  url_halfyear_report: string
  url_annual_report: string
  url_factsheet: string
}

export type FundFactSheet = Selectable<FundFactSheetTable>
export type NewFundFactSheet = Insertable<FundFactSheetTable>
export type FundFactSheetUpdate = Updateable<FundFactSheetTable>

export interface FundProjectInfoTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  proj_retail_type: string
  proj_term_flag: boolean
  proj_term_dd: string
  proj_term_mm: string
  proj_term_yy: string
}

export type FundProjectInfo = Selectable<FundProjectInfoTable>
export type NewFundProjectInfo = Insertable<FundProjectInfoTable>
export type FundProjectInfoUpdate = Updateable<FundProjectInfoTable>

export interface FundPoliciesTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  policy_desc: string
  investment_policy_desc: string /* (fromBase64) */
  management_style: string
}

export type FundPolicies = Selectable<FundPoliciesTable>
export type NewFundPolicies = Insertable<FundPoliciesTable>
export type FundPoliciesUpdate = Updateable<FundPoliciesTable>

export interface FundSuitabilityTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  fund_suitable_desc:string /* (fromBase64) */
  fund_not_suitable_desc: string /* (fromBase64) */
  important_notice: string /* (fromBase64) */
  risk_spectrum_desc: string /* (fromBase64) */
  risk_spectrum: string
}

export type FundSuitability = Selectable<FundSuitabilityTable>
export type NewFundSuitability = Insertable<FundSuitabilityTable>
export type FundSuitabilityUpdate = Updateable<FundSuitabilityTable>

export interface FundEstimatedReturnTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  total_estimated_return: number
  annual_estimated_expense: number
  annual_average_return: number
  investment_period_year: string
  investment_period_month: string
}

export type FundEstimatedReturn = Selectable<FundEstimatedReturnTable>
export type NewFundEstimatedReturn = Insertable<FundEstimatedReturnTable>
export type FundEstimatedReturnUpdate = Updateable<FundEstimatedReturnTable>

export interface FundBenchmarkTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  group_seq: string
  benchmark: string
}

export type FundBenchmark = Selectable<FundBenchmarkTable>
export type NewFundBenchmark = Insertable<FundBenchmarkTable>
export type FundBenchmarkUpdate = Updateable<FundBenchmarkTable>

export interface FundPerformanceTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  class_abbr_name: string
  performance_type_desc: string
  reference_period: string
  performance_val: string
  as_of_date: string
}

export type FundPerformance = Selectable<FundPerformanceTable>
export type NewFundPerformance = Insertable<FundPerformanceTable>
export type FundPerformanceUpdate = Updateable<FundPerformanceTable>

export interface FundDividendPolicyTable {
  last_upd_date: Date
  proj_id: ColumnType<string, string , never>
  class_abbr_name: string,
  dividend_policy: string,
  dividend_policy_remark: string,
  dividend_details: JSONColumnType<{
    book_closing_date: string | null;
    payment_date: string | null;
    dividend_per_share: string | null;
  }>
}

export type FundDividendPolicy = Selectable<FundDividendPolicyTable>
export type NewFundDividendPolicy = Insertable<FundDividendPolicyTable>
export type FundDividendPolicyUpdate = Updateable<FundDividendPolicyTable>

export interface FundDailyInfoTable {
  nav_date: Date
  proj_id: ColumnType<string, string , never>
  net_asset: number
  last_val: number
}

export type FundDailyInfo = Selectable<FundDailyInfoTable>
export type NewFundDailyInfo = Insertable<FundDailyInfoTable>
export type FundDailyInfoUpdate = Updateable<FundDailyInfoTable>
